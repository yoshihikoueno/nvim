[[plugins]]
repo = 'janko/vim-test'
hook_add = '''
    let g:test#strategy = 'neovim'

    nmap <Space>t [vim-test]
    nmap [vim-test] <Nop>
    nmap [vim-test]n :TestNearest<CR>
    nmap [vim-test]f :TestFile<CR>
    nmap [vim-test]s :TestSuite<CR>
    nmap [vim-test]l :TestLast<CR>
    nmap [vim-test]v :TestVisit<CR>
'''

[[plugins]]
repo = 'lervag/vimtex'
hook_add = '''
    let g:vimtex_compiler_progname = 'nvr'
'''

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
    nnoremap <Space>c :CocCommand<CR>
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nmap <Space>g [vim-fugitive]
    nmap [vim-fugitive] <Nop>
    nmap [vim-fugitive]o :G<CR>
    nmap [vim-fugitive]c :Gcommit<CR>
    nmap [vim-fugitive]p :Gpush<CR>
'''

[[plugins]]
repo = 'rhysd/git-messenger.vim'

[[plugins]]
repo = 'scrooloose/nerdcommenter'

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_python_flake8_executable = g:python3_host_prog
  let g:ale_python_flake8_options = '-m flake8 --ignore=E501,E302,E701'
  let g:ale_python_autopep8_executable = g:python3_host_prog
  let g:ale_python_autopep8_options = '-m autopep8 --ignore W50,W690'
  let g:ale_fixers= {
  \   'python': ['autopep8'],
  \}
  let g:ale_linters = {
  \   'python': ['flake8'],
  \}
  
  let g:ale_echo_msg_format = '[%linter%]%code% %s'
  
  " Enable when open
  let g:ale_lint_on_enter = 1
  let g:ale_lint_on_save = 1
  " lint結果をロケーションリストとQuickFixには表示しない
  " 出てると結構うざいしQuickFixを書き換えられるのは困る
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0
  
  " ALE用プレフィックス
  nmap [ale] <Nop>
  map <C-k> [ale]
  " エラー行にジャンプ
  nmap <silent> [ale]<C-P> <Plug>(ale_previous)
  nmap <silent> [ale]<C-N> <Plug>(ale_next)
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'yoshihikoueno/vim-quickrun'
hook_add= '''
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config._ = {
            \   'runner': 'terminal',
            \   'runner/terminal/opener': "botright new \[quickrun\ output\]",
  \ }
  let g:quickrun_config.tex = {
            \   'command' : 'preview_tex',
  \ }
  let g:quickrun_config.python = {
            \   'command' : 'python3',
  \ }
  let g:quickrun_config["nooutput"] = {
            \   'runner/terminal/opener': "tabnew \[quickrun\ output\]",
  \}
  let g:quickrun_config["nooutput_sticky"] = {
            \   'runner/terminal/opener': "tabnew \[quickrun\ output\]",
            \   'runner/terminal/closeonsuccess': 0,
  \}
  let g:quickrun_config["sticky"] = {
            \   'runner/terminal/closeonsuccess': 0,
  \}

  command! -bar CloseQuickRunOutput ccl | call Close_quickrun_terminal() | silent! bw! \[quickrun\ output\]
  command! -bar RunWithouOutput call quickrun#run(g:quickrun_config.nooutput)
  command! -bar RunWithouOutputSticky call quickrun#run(g:quickrun_config.nooutput_sticky)
  command! -bar RunSticky call quickrun#run(g:quickrun_config.sticky)

  nnoremap <Leader>q :CloseQuickRunOutput<CR>
  nnoremap <Leader>t :RunWithouOutput<CR>
  nnoremap <Leader>T :RunWithouOutputSticky<CR>
  nnoremap <Leader>R :RunSticky<CR>
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
    map <C-j><C-i> :Denite file/rec<CR>i
    map <C-j><C-o> :Denite grep:::!<CR>i
	" Define mappings
	autocmd FileType denite call s:denite_my_settings()
	function! s:denite_my_settings() abort
	  nnoremap <silent><buffer><expr> <CR>
	  \ denite#do_map('do_action')
	  nnoremap <silent><buffer><expr> d
	  \ denite#do_map('do_action', 'delete')
	  nnoremap <silent><buffer><expr> p
	  \ denite#do_map('do_action', 'preview')
	  nnoremap <silent><buffer><expr> q
	  \ denite#do_map('quit')
	  nnoremap <silent><buffer><expr> i
	  \ denite#do_map('open_filter_buffer')
	  nnoremap <silent><buffer><expr> <Space>
	  \ denite#do_map('toggle_select').'j'
	endfunction

	autocmd FileType denite-filter call s:denite_filter_my_settings()
	function! s:denite_filter_my_settings() abort
	  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
	endfunction

	" Change file/rec command.
	call denite#custom#var('file/rec', 'command',
	\ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

	" For ripgrep
	" Note: It is slower than ag
	" call denite#custom#var('file/rec', 'command',
	" \ ['rg', '--files', '--glob', '!.git'])

	" For Pt(the platinum searcher)
	" NOTE: It also supports windows.
	" call denite#custom#var('file/rec', 'command',
	" \ ['pt', '--follow', '--nocolor', '--nogroup',
	" \  (has('win32') ? '-g:' : '-g='), ''])

	" For python script scantree.py
	" Read bellow on this file to learn more about scantree.py
	" call denite#custom#var('file/rec', 'command',
	" \ ['scantree.py', '--path', ':directory'])

	" Change matchers.
	call denite#custom#source(
	\ 'file_mru', 'matchers', ['matcher/fuzzy', 'matcher/project_files'])
	call denite#custom#source(
	\ 'file/rec', 'matchers', ['matcher/cpsm', 'matcher/ignore_globs'])

	" Change sorters.
	call denite#custom#source(
	\ 'file/rec', 'sorters', ['sorter/sublime'])

	" Change default action.
	call denite#custom#kind('file', 'default_action', 'split')

	" Add custom menus
	let s:menus = {}

	let s:menus.zsh = {
		\ 'description': 'Edit your import zsh configuration'
		\ }
	let s:menus.zsh.file_candidates = [
		\ ['zshrc', '~/.config/zsh/.zshrc'],
		\ ['zshenv', '~/.zshenv'],
		\ ]

	let s:menus.my_commands = {
		\ 'description': 'Example commands'
		\ }
	let s:menus.my_commands.command_candidates = [
		\ ['Split the window', 'vnew'],
		\ ['Open zsh menu', 'Denite menu:zsh'],
		\ ['Format code', 'FormatCode', 'go,python'],
		\ ]

	call denite#custom#var('menu', 'menus', s:menus)

	" Ag command on grep source
	call denite#custom#var('grep', 'command', ['ag'])
	call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
	call denite#custom#var('grep', 'recursive_opts', [])
	call denite#custom#var('grep', 'pattern_opt', [])
	call denite#custom#var('grep', 'separator', ['--'])
	call denite#custom#var('grep', 'final_opts', [])

	" Ack command on grep source
	" call denite#custom#var('grep', 'command', ['ack'])
	" call denite#custom#var('grep', 'default_opts',
	" 		\ ['--ackrc', $HOME.'/.ackrc', '-H', '-i',
	" 		\  '--nopager', '--nocolor', '--nogroup', '--column'])
	" call denite#custom#var('grep', 'recursive_opts', [])
	" call denite#custom#var('grep', 'pattern_opt', ['--match'])
	" call denite#custom#var('grep', 'separator', ['--'])
	" call denite#custom#var('grep', 'final_opts', [])

	" " Ripgrep command on grep source
	" call denite#custom#var('grep', 'command', ['rg'])
	" call denite#custom#var('grep', 'default_opts',
	" 		\ ['-i', '--vimgrep', '--no-heading'])
	" call denite#custom#var('grep', 'recursive_opts', [])
	" call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
	" call denite#custom#var('grep', 'separator', ['--'])
	" call denite#custom#var('grep', 'final_opts', [])

	" " Pt command on grep source
	" call denite#custom#var('grep', 'command', ['pt'])
	" call denite#custom#var('grep', 'default_opts',
	" 		\ ['-i', '--nogroup', '--nocolor', '--smart-case'])
	" call denite#custom#var('grep', 'recursive_opts', [])
	" call denite#custom#var('grep', 'pattern_opt', [])
	" call denite#custom#var('grep', 'separator', ['--'])
	" call denite#custom#var('grep', 'final_opts', [])

	" " jvgrep command on grep source
	" call denite#custom#var('grep', 'command', ['jvgrep'])
	" call denite#custom#var('grep', 'default_opts', ['-i'])
	" call denite#custom#var('grep', 'recursive_opts', ['-R'])
	" call denite#custom#var('grep', 'pattern_opt', [])
	" call denite#custom#var('grep', 'separator', [])
	" call denite#custom#var('grep', 'final_opts', [])

	" Specify multiple paths in grep source
	"call denite#start([{'name': 'grep', 'args': [['a.vim', 'b.vim'], '', 'pattern']}])

	" Define alias
	call denite#custom#alias('source', 'file/rec/git', 'file/rec')
	call denite#custom#var('file/rec/git', 'command',
	      \ ['git', 'ls-files', '-co', '--exclude-standard'])

	call denite#custom#alias('source', 'file/rec/py', 'file/rec')
	call denite#custom#var('file/rec/py', 'command',
	\ ['scantree.py', '--path', ':directory'])

	" Change ignore_globs
	call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
	      \ [ '.git/', '.ropeproject/', '__pycache__/',
	      \   'venv/', 'env/', 'images/', '*.min.*', 'img/', 'fonts/', 'node_modules/'])

	" Custom action
	" Note: lambda function is not supported in Vim8.
	call denite#custom#action('file', 'test',
	      \ {context -> execute('let g:foo = 1')})
	call denite#custom#action('file', 'test2',
	      \ {context -> denite#do_action(
	      \  context, 'open', context['targets'])})
let s:denite_win_width_percent = 0.85
let s:denite_win_height_percent = 0.7

" Change denite default options
call denite#custom#option('default', {
    \ 'split': 'floating',
    \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
    \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
    \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
    \ })
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  "左側に使用されるセパレータ
  let g:airline_left_sep = '⮀'
  let g:airline_left_alt_sep = '⮁'
  "右側に使用されるセパレータ
  let g:airline_right_sep = '⮂'
  let g:airline_right_alt_sep = '⮃'
  " let g:airline_symbols.crypt = '🔒'		"暗号化されたファイル
  " let g:airline_symbols.linenr = '¶'			"行
  " let g:airline_symbols.maxlinenr = '㏑'		"最大行
  " let g:airline_symbols.branch = '⭠'		"gitブランチ
  " let g:airline_symbols.paste = 'ρ'			"ペーストモード
  " let g:airline_symbols.spell = 'Ꞩ'			"スペルチェック
  " let g:airline_symbols.notexists = '∄'		"gitで管理されていない場合
  " let g:airline_symbols.whitespace = 'Ξ'	"空白の警告(余分な空白など)
  " パワーラインでかっこよく
  let g:airline_powerline_fonts = 1
  " カラーテーマ指定してかっこよく
  let g:airline_theme = 'badwolf'
  " タブバーをかっこよく
  let g:airline#extensions#tabline#enabled = 1
  
  " 選択行列の表示をカスタム(デフォルトだと長くて横幅を圧迫するので最小限に)
  let g:airline_section_z = airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])
  
  " virtulenvを認識しているか確認用に、現在activateされているvirtualenvを表示(vim-virtualenvの拡張)
  let g:airline#extensions#virtualenv#enabled = 1
  
  " gitのHEADから変更した行の+-を非表示(vim-gitgutterの拡張)
  let g:airline#extensions#hunks#enabled = 0
  
  " Lintツールによるエラー、警告を表示(ALEの拡張)
  let g:airline#extensions#ale#enabled = 1
  let g:airline#extensions#ale#error_symbol = 'E:'
  let g:airline#extensions#ale#warning_symbol = 'W:'
'''
