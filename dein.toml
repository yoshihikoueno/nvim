[[plugins]]
repo = 'jiangmiao/auto-pairs'

#[[plugins]]
#repo = 'davidhalter/jedi-vim'

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'zchee/deoplete-jedi'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_post_update = '''
  let g:quickrun_config = {'*': {'hook/time/enable': '1'},}
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
#hook_add = 'let g:deoplete#enable_at_startup = 1'
hook_add = '''
	" Use deoplete.
	let g:deoplete#enable_at_startup = 1
	" Use smartcase.
	call deoplete#custom#option('smart_case', v:true)

	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
	inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"

	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function() abort
	  return deoplete#close_popup() . "\<CR>"
  endfunction
'''

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  " Denite用プレフィックス
  nmap [denite] <Nop>
  map <C-j> [denite]
  
  " プロジェクト内のファイル検索
  nmap <silent> [denite]<C-P> :<C-u>Denite file_rec -highlight-mode-insert=Search<CR>
  " バッファに展開中のファイル検索
  nmap <silent> [denite]<C-B> :<C-u>Denite buffer -highlight-mode-insert=Search<CR>
  " ファイル内の関数/クラス等の検索
  nmap <silent> [denite]<C-O> :<C-u>Denite outline -highlight-mode-insert=Search<CR>
  " dotfiles配下をカレントにしてfile_rec起動
  nmap <silent> [denite]<C-V> :<C-u>call denite#start([{'name': 'file_rec', 'args': ['~/.dotfiles']}]) -highlight-mode-insert=Search=Search<CR>
  
  " 上下移動を<C-N>, <C-P>
  call denite#custom#map('normal', '<C-N>', '<denite:move_to_next_line>')
  call denite#custom#map('normal', '<C-P>', '<denite:move_to_previous_line>')
  call denite#custom#map('insert', '<C-N>', '<denite:move_to_next_line>')
  call denite#custom#map('insert', '<C-P>', '<denite:move_to_previous_line>')
  " 入力履歴移動を<C-J>, <C-K>
  call denite#custom#map('insert', '<C-J>', '<denite:assign_next_text>')
  call denite#custom#map('insert', '<C-K>', '<denite:assign_previous_text>')
  " 横割りオープンを`<C-S>`
  call denite#custom#map('insert', '<C-S>', '<denite:do_action:split>')
  " 縦割りオープンを`<C-I>`
  call denite#custom#map('insert', '<C-I>', '<denite:do_action:vsplit>')
  " タブオープンを`<C-O>`
  call denite#custom#map('insert', '<C-O>', '<denite:do_action:tabopen>')
  
  " file_rec検索時にfuzzymatchを有効にし、検索対象から指定のファイルを除外
  call denite#custom#source(
      \ 'file_rec', 'matchers', ['matcher_fuzzy', 'matcher_project_files', 'matcher_ignore_globs'])
  
  " 検索対象外のファイル指定
  call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
      \ [ '.git/', '.ropeproject/', '__pycache__/',
      \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  "左側に使用されるセパレータ
  let g:airline_left_sep = '⮀'
  let g:airline_left_alt_sep = '⮁'
  "右側に使用されるセパレータ
  let g:airline_right_sep = '⮂'
  let g:airline_right_alt_sep = '⮃'
  " let g:airline_symbols.crypt = '🔒'		"暗号化されたファイル
  " let g:airline_symbols.linenr = '¶'			"行
  " let g:airline_symbols.maxlinenr = '㏑'		"最大行
  " let g:airline_symbols.branch = '⭠'		"gitブランチ
  " let g:airline_symbols.paste = 'ρ'			"ペーストモード
  " let g:airline_symbols.spell = 'Ꞩ'			"スペルチェック
  " let g:airline_symbols.notexists = '∄'		"gitで管理されていない場合
  " let g:airline_symbols.whitespace = 'Ξ'	"空白の警告(余分な空白など)
  " パワーラインでかっこよく
  let g:airline_powerline_fonts = 1
  " カラーテーマ指定してかっこよく
  let g:airline_theme = 'badwolf'
  " タブバーをかっこよく
  let g:airline#extensions#tabline#enabled = 1
  
  " 選択行列の表示をカスタム(デフォルトだと長くて横幅を圧迫するので最小限に)
  let g:airline_section_z = airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])
  
  " virtulenvを認識しているか確認用に、現在activateされているvirtualenvを表示(vim-virtualenvの拡張)
  let g:airline#extensions#virtualenv#enabled = 1
  
  " gitのHEADから変更した行の+-を非表示(vim-gitgutterの拡張)
  let g:airline#extensions#hunks#enabled = 0
  
  " Lintツールによるエラー、警告を表示(ALEの拡張)
  let g:airline#extensions#ale#enabled = 1
  let g:airline#extensions#ale#error_symbol = 'E:'
  let g:airline#extensions#ale#warning_symbol = 'W:'
'''
